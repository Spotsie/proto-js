// @generated by protoc-gen-es v1.3.1
// @generated from file subject/v1/subject.proto (package subject.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Subject } from "../../domain/v1/domain_pb.js";

/**
 * @generated from enum subject.v1.Scope
 */
export declare enum Scope {
  /**
   * @generated from enum value: SCOPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCOPE_GLOBAL = 1;
   */
  GLOBAL = 1,

  /**
   * @generated from enum value: SCOPE_ORGANIZATION = 2;
   */
  ORGANIZATION = 2,
}

/**
 * @generated from message subject.v1.SubjectMetadata
 */
export declare class SubjectMetadata extends Message<SubjectMetadata> {
  /**
   * @generated from field: domain.v1.Subject subject = 1;
   */
  subject?: Subject;

  /**
   * @generated from field: map<string, string> properties = 2;
   */
  properties: { [key: string]: string };

  /**
   * @generated from field: subject.v1.Scope scope = 3;
   */
  scope: Scope;

  constructor(data?: PartialMessage<SubjectMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "subject.v1.SubjectMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubjectMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubjectMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubjectMetadata;

  static equals(a: SubjectMetadata | PlainMessage<SubjectMetadata> | undefined, b: SubjectMetadata | PlainMessage<SubjectMetadata> | undefined): boolean;
}

/**
 * @generated from message subject.v1.TemperatureTelemetry
 */
export declare class TemperatureTelemetry extends Message<TemperatureTelemetry> {
  /**
   * celsius
   *
   * @generated from field: int32 temperature = 1;
   */
  temperature: number;

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<TemperatureTelemetry>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "subject.v1.TemperatureTelemetry";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemperatureTelemetry;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemperatureTelemetry;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemperatureTelemetry;

  static equals(a: TemperatureTelemetry | PlainMessage<TemperatureTelemetry> | undefined, b: TemperatureTelemetry | PlainMessage<TemperatureTelemetry> | undefined): boolean;
}

/**
 * @generated from message subject.v1.BatteryTelemetry
 */
export declare class BatteryTelemetry extends Message<BatteryTelemetry> {
  /**
   * mVolts
   *
   * @generated from field: int32 voltage = 1;
   */
  voltage: number;

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<BatteryTelemetry>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "subject.v1.BatteryTelemetry";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatteryTelemetry;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatteryTelemetry;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatteryTelemetry;

  static equals(a: BatteryTelemetry | PlainMessage<BatteryTelemetry> | undefined, b: BatteryTelemetry | PlainMessage<BatteryTelemetry> | undefined): boolean;
}

