// @generated by protoc-gen-es v0.2.1 with parameter "target=js+dts"
// @generated from file notification/v1/notification.proto (package notification.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message notification.v1.MailAlert
 */
export declare class MailAlert extends Message<MailAlert> {
  /**
   * Specifies how many identical emails will be sent to the receivers
   *
   * @generated from field: int32 max_send = 1;
   */
  maxSend: number;

  /**
   * Comma separated list of email recipients
   * example: "joe@email.com, mark@email.com"
   *
   * @generated from field: optional string to = 2;
   */
  to?: string;

  /**
   * Comma separated list of email recipients
   * example: "joe@email.com, mark@email.com"
   *
   * @generated from field: optional string cc = 3;
   */
  cc?: string;

  /**
   * Comma separated list of email recipients
   * example: "joe@email.com, mark@email.com"
   *
   * @generated from field: optional string bcc = 4;
   */
  bcc?: string;

  /**
   * Optional subject for the email message
   *
   * @generated from field: optional string subject = 5;
   */
  subject?: string;

  /**
   * Optional content for the email message
   *
   * @generated from field: optional string content = 6;
   */
  content?: string;

  constructor(data?: PartialMessage<MailAlert>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "notification.v1.MailAlert";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MailAlert;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MailAlert;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MailAlert;

  static equals(a: MailAlert | PlainMessage<MailAlert> | undefined, b: MailAlert | PlainMessage<MailAlert> | undefined): boolean;
}

/**
 * @generated from message notification.v1.GithubAlert
 */
export declare class GithubAlert extends Message<GithubAlert> {
  /**
   * Specifies how many identical GitHub issues will be created
   *
   * @generated from field: int32 max_send = 1;
   */
  maxSend: number;

  /**
   * List of GitHub users assigned to the issue, can be an empty list
   * example: ["joe", "mark"]
   *
   * @generated from field: repeated string assignees = 2;
   */
  assignees: string[];

  /**
   * Optional title of the GitHub issue
   *
   * @generated from field: optional string subject = 3;
   */
  subject?: string;

  /**
   * Optional body of the GitHub issue
   *
   * @generated from field: optional string content = 4;
   */
  content?: string;

  /**
   * List of GitHub labels assigned to the issue, can be an empty list
   * example: ["bug", "duplicate", "documentation"]
   *
   * @generated from field: repeated string labels = 5;
   */
  labels: string[];

  constructor(data?: PartialMessage<GithubAlert>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "notification.v1.GithubAlert";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubAlert;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubAlert;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubAlert;

  static equals(a: GithubAlert | PlainMessage<GithubAlert> | undefined, b: GithubAlert | PlainMessage<GithubAlert> | undefined): boolean;
}

/**
 * @generated from message notification.v1.Notification
 */
export declare class Notification extends Message<Notification> {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * Subject which briefly describes the event
   *
   * @generated from field: string subject = 2;
   */
  subject: string;

  /**
   * Optional content which in detail describes the event
   *
   * @generated from field: optional string content = 3;
   */
  content?: string;

  /**
   * Specifies the id of event, example: "123"
   *
   * @generated from field: string event_id = 4;
   */
  eventId: string;

  /**
   * Specifies the type of event, example: "database.down"
   *
   * @generated from field: string event_type = 5;
   */
  eventType: string;

  /**
   * List of Mail alerts, can be an empty list
   *
   * @generated from field: repeated notification.v1.MailAlert mail_alert = 6;
   */
  mailAlert: MailAlert[];

  /**
   * List of GitHub alerts, can be an empty list
   *
   * @generated from field: repeated notification.v1.GithubAlert github_alert = 7;
   */
  githubAlert: GithubAlert[];

  constructor(data?: PartialMessage<Notification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "notification.v1.Notification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification;

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean;
}

